<link
  rel="stylesheet"
  href="https://unpkg.com/todomvc-app-css@2.4.1/index.css"
/>
<style>
  [v-cloak] {
    display: none;
  }
</style>

<script type="module">
  import { createApp } from 'https://unpkg.com/petite-vue?module'

  const STORAGE_KEY = 'todos-petite-vue'
  const todoListAPI = '/api/todo_lists'
  const todoStorage = { 
    save(todos) {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))
    }
  }
  const csrfToken = document.querySelector("meta[name=csrf-token]").content
  const filters = {
    all(todos) {
      return todos
    },
    active(todos) {
      return todos.filter((todo) => {
        return !todo.completed
      })
    },
    completed(todos) {
      return todos.filter(function (todo) {
        return todo.completed
      })
    }
  }

  createApp({
    todos: [],
    newTodo: '',
    editedTodo: null,
    visibility: 'all',

    get filteredTodos() {
      return filters[this.visibility](this.todos)
    },

    get remaining() {
      return filters.active(this.todos).length
    },

    get allDone() {
      return this.remaining === 0
    },

    set allDone(value) {
      this.todos.forEach(function (todo) {
        todo.completed = value
      })
    },

    save() {
      todoStorage.save(this.todos)
    },

    fetchData() {
      fetch(todoListAPI)
        .then((res) => res.json())
        .then((data) => {
          this.todos = data.todo_lists
        })
    },

    setupRouting() {
      const onHashChange = () => {
        var visibility = window.location.hash.replace(/#\/?/, '')
        if (filters[visibility]) {
          this.visibility = visibility
        } else {
          window.location.hash = ''
          this.visibility = 'all'
        }
      }
      window.addEventListener('hashchange', onHashChange)
      onHashChange()
    },

    mounted() {
      this.setupRouting()
      this.fetchData()
    },

    addTodo() {
      var value = this.newTodo && this.newTodo.trim()
      if (!value) {
        return
      }
      // send request to backend
      fetch(todoListAPI, {
        method: 'POST',
        headers: {
          'X-CSRF-Token': csrfToken,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          todo_list: {
            body: value,
            completed: false
          }
        })
      })
      .then(response => response.json())
      .then(data => this.todos = data.todo_lists)
      .catch((error) => console.log(errors))
      // 1. success
      // 2. fail
      this.newTodo = ''
    },

    removeTodo(todo) {
      this.todos.splice(this.todos.indexOf(todo), 1)
    },

    editTodo(todo) {
      this.beforeEditCache = todo.body
      this.editedTodo = todo
    },

    doneEdit(todo) {
      if (!this.editedTodo) {
        return
      }
      this.editedTodo = null
      fetch(`${todoListAPI}/${todo.id}`, {
        method: 'PUT',
        headers: {
          'X-CSRF-Token': csrfToken,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          todo_list: {
            body: todo.body.trim(),
          }
        })
      })
      .then(response => response.json())
      .then(data => alert('Todo updated!'))
      .catch((error) => console.log(errors))

      if (!todo.body) {
        this.removeTodo(todo)
      }
    },

    toggleCompleteTodo(todo) {
      const status = !todo.completed
      fetch(`${todoListAPI}/${todo.id}`, {
        method: 'PUT',
        headers: {
          'X-CSRF-Token': csrfToken,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          todo_list: {
            completed: status,
          }
        })
      })
      .then(response => response.json())
      .then(data => {
        todo.completed = status
        const idx = this.todos.findIndex((listTodo) => listTodo.id == todo.id)
        this.todos.splice(idx, todo)
        if (todo.completed) {
          alert('Todo completed!')
        } else {
          alert('Todo uncompleted!')
        }
        
      })
      .catch((error) => console.log(error))
    },

    cancelEdit(todo) {
      this.editedTodo = null
      todo.body = this.beforeEditCache
    },

    removeCompleted() {
      this.todos = filters.active(this.todos)
    },

    pluralize(n) {
      return n === 1 ? 'item' : 'items'
    }
  }).mount('#app')
</script>

<div id="app" @vue:mounted="mounted" v-effect="save()" v-cloak>
  <section class="todoapp">
    <header class="header">
      <h1>todos</h1>
      <input
        class="new-todo"
        autofocus
        autocomplete="off"
        placeholder="What needs to be done?"
        v-model="newTodo"
        @keyup.enter="addTodo"
      />
    </header>
    <section class="main" v-show="todos.length">
      <input
        id="toggle-all"
        class="toggle-all"
        type="checkbox"
        v-model="allDone"
      />
      <label for="toggle-all">Mark all as complete</label>
      <ul class="todo-list">
        <li
          v-for="todo in filteredTodos"
          class="todo"
          :key="todo.id"
          :class="{ completed: todo.completed, editing: todo === editedTodo }"
        >
          <div class="view">
            <input class="toggle" type="checkbox" :checked="todo.completed" @change="toggleCompleteTodo(todo)"/>
            <label @dblclick="editTodo(todo)">{{ todo.body }}</label>
            <button class="destroy" @click="removeTodo(todo)"></button>
          </div>
          <input
            class="edit"
            type="text"
            v-model="todo.body"
            v-effect="if (todo === editedTodo) $el.focus()"
            @blur="doneEdit(todo)"
            @keyup.enter="doneEdit(todo)"
            @keyup.escape="cancelEdit(todo)"
          />
        </li>
      </ul>
    </section>
    <footer class="footer" v-show="todos.length">
      <span class="todo-count">
        <strong>{{ remaining }}</strong>
        <span>{{ pluralize(remaining) }} left</span>
      </span>
      <ul class="filters">
        <li>
          <a href="#/all" :class="{ selected: visibility === 'all' }">All</a>
        </li>
        <li>
          <a href="#/active" :class="{ selected: visibility === 'active' }"
            >Active</a
          >
        </li>
        <li>
          <a
            href="#/completed"
            :class="{ selected: visibility === 'completed' }"
            >Completed</a
          >
        </li>
      </ul>
      <button
        class="clear-completed"
        @click="removeCompleted"
        v-show="todos.length > remaining"
      >
        Clear completed
      </button>
    </footer>
  </section>
</div>
